//A client to server chat in one program through C programming 

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

pthread_mutex_t lock;
static const int MAX_MESSAGE_LENGTH = 80;
int counter = 0 ;
void *udp_client(void *vargp)
{
    int sockfd;
    struct sockaddr_in server_addr;
    struct hostent *host;
    char send_data[MAX_MESSAGE_LENGTH];
    
    host= (struct hostent *) gethostbyname((char *)"127.0.0.1");
    
    
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
    {
        perror("socket");
        exit(1);
    }
    
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(5000);
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
    bzero(&(server_addr.sin_zero),8);
    
    while (1)
    {
        
        printf("client: Say Something (type %%stop to quit):");
        gets(send_data);
        
        sendto(sockfd, send_data, strlen(send_data), 0,
               (struct sockaddr *)&server_addr, sizeof(struct sockaddr));
        
        pthread_mutex_lock(&lock);
        counter--;
        pthread_mutex_unlock(&lock);
        
        usleep(5);

        if ((strcmp(send_data , "%stop") == 0))
            break;
        
    }
    close(sockfd);
    return NULL;
    
}


void * udp_server(void *vargp)
{
    int sockfd;
    struct sockaddr_in servaddr;
    char buffer[MAX_MESSAGE_LENGTH];
    
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(5000);
    servaddr.sin_addr.s_addr = INADDR_ANY;
    
    if ( bind(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) != 0 )
        perror("bind");
    
    while (1)
    {
        int bytes, addr_len=sizeof(servaddr);
        memset(buffer,0, 80);
        bytes = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&servaddr, &addr_len);
        printf("server: message recieved %s\n", buffer);
        
        pthread_mutex_lock(&lock);
        counter++;
        pthread_mutex_unlock(&lock);
    
        if (strncmp(buffer, "%stop", 5) == 0)
            break;
    }
    close(sockfd);
    return NULL;
    
}

int main(int argn, char *argv[])
{
    if (argn > 3) {
        fprintf(stderr, "Usage: %s [server.ip.address [port]]\n", argv[0]);
        return EXIT_FAILURE;
    }
    pthread_t send, rec;
    
    if (pthread_mutex_init(&lock, NULL) != 0)
    {
        perror("\n mutex has failed\n");
        return EXIT_FAILURE;
    }
    pthread_create(&send, NULL, udp_client, NULL);
    pthread_create(&rec, NULL, udp_server, NULL);

    pthread_join(send, NULL);
    pthread_join(rec, NULL);
    printf("Counter value: (%d)>\n", counter);
    exit(0);
}
